import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import pandas as pd
from datetime import datetime

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
calc_data = {}


def calculate():
    global calc_data
    try:
        # === –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ ===
        C_–∞–∫–± = float(entry_C.get() or 130)
        U_–∞–∫–± = float(entry_U.get() or 24)
        N_–∞–∫–± = float(entry_N.get() or 2)
        dod = float(entry_DoD.get() or 85) / 100

        I_–∑–∞—Ä = float(entry_I_cc.get() or 40)
        U_cc = float(entry_U_cc.get() or 26.7)

        U_cv = float(entry_U_cv.get() or 26.75)
        I_cv = float(entry_I_cv.get() or 4)

        eta_inv = float(entry_eta.get() or 92) / 100
        q = float(entry_q.get() or 0.5)

        P_–Ω–∞–≥—Ä—É–∑–∫–∞ = float(entry_P.get() or 170)

        # === –†–ê–°–ß–Å–¢–´ ===
        E_–∞–∫–±_–æ–±—â = N_–∞–∫–± * C_–∞–∫–± * U_–∞–∫–±
        E_–Ω—É–∂–Ω–æ = E_–∞–∫–±_–æ–±—â * dod

        # –†–µ–∂–∏–º CC
        P_–∑–∞—Ä_cc = U_cc * I_–∑–∞—Ä
        t_–∑–∞—Ä_cc = (E_–Ω—É–∂–Ω–æ * 0.6) / P_–∑–∞—Ä_cc
        P_–ø–æ—Ç—Ä_–≥–µ–Ω_cc = P_–∑–∞—Ä_cc / eta_inv

        # –†–µ–∂–∏–º CV
        P_–∑–∞—Ä_cv = U_cv * I_cv
        t_–∑–∞—Ä_cv = (E_–Ω—É–∂–Ω–æ * 0.2) / P_–∑–∞—Ä_cv
        P_–ø–æ—Ç—Ä_–≥–µ–Ω_cv = P_–∑–∞—Ä_cv / eta_inv

        # –û–±—â–µ–µ –≤—Ä–µ–º—è –∏ —Ç–æ–ø–ª–∏–≤–æ
        t_–∑–∞—Ä_–æ–±—â = t_–∑–∞—Ä_cc + t_–∑–∞—Ä_cv

        V_—Ç–æ–ø–ª–∏–≤–æ_cc = t_–∑–∞—Ä_cc * (P_–ø–æ—Ç—Ä_–≥–µ–Ω_cc / 1000) * q
        V_—Ç–æ–ø–ª–∏–≤–æ_cv = t_–∑–∞—Ä_cv * (P_–ø–æ—Ç—Ä_–≥–µ–Ω_cv / 1000) * q
        V_—Ç–æ–ø–ª–∏–≤–æ_–æ–±—â = V_—Ç–æ–ø–ª–∏–≤–æ_cc + V_—Ç–æ–ø–ª–∏–≤–æ_cv

        t_–∞–≤—Ç–æ–Ω–æ–º–∏—è = E_–Ω—É–∂–Ω–æ / P_–Ω–∞–≥—Ä—É–∑–∫–∞

        # === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ===
        calc_data = {
            "–û–±—â–∞—è —ç–Ω–µ—Ä–≥–æ—ë–º–∫–æ—Å—Ç—å –ê–ö–ë": E_–∞–∫–±_–æ–±—â,
            "–≠–Ω–µ—Ä–≥–∏—è –¥–ª—è –∑–∞—Ä—è–¥–∞ (DoD)": E_–Ω—É–∂–Ω–æ,
            "–ú–æ—â–Ω–æ—Å—Ç—å –∑–∞—Ä—è–¥–∞ (CC)": P_–∑–∞—Ä_cc,
            "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ (CC)": P_–ø–æ—Ç—Ä_–≥–µ–Ω_cc,
            "–í—Ä–µ–º—è –∑–∞—Ä—è–¥–∞ (CC)": t_–∑–∞—Ä_cc,
            "–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (CC)": V_—Ç–æ–ø–ª–∏–≤–æ_cc,
            "–ú–æ—â–Ω–æ—Å—Ç—å –∑–∞—Ä—è–¥–∞ (CV)": P_–∑–∞—Ä_cv,
            "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ (CV)": P_–ø–æ—Ç—Ä_–≥–µ–Ω_cv,
            "–í—Ä–µ–º—è –∑–∞—Ä—è–¥–∞ (CV)": t_–∑–∞—Ä_cv,
            "–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (CV)": V_—Ç–æ–ø–ª–∏–≤–æ_cv,
            "–û–±—â–µ–µ –≤—Ä–µ–º—è –∑–∞—Ä—è–¥–∞": t_–∑–∞—Ä_–æ–±—â,
            "–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞": V_—Ç–æ–ø–ª–∏–≤–æ_–æ–±—â,
            "–í—Ä–µ–º—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã": t_–∞–≤—Ç–æ–Ω–æ–º–∏—è
        }

        # === –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ===
        result_text = (
            f"üîã –û–±—â–∞—è —ç–Ω–µ—Ä–≥–æ—ë–º–∫–æ—Å—Ç—å –ê–ö–ë: {E_–∞–∫–±_–æ–±—â:.0f} –í—Ç¬∑—á\n"
            f"‚ö° –≠–Ω–µ—Ä–≥–∏—è –¥–ª—è –∑–∞—Ä—è–¥–∞ (DoD={dod*100:.0f}%): {E_–Ω—É–∂–Ω–æ:.0f} –í—Ç¬∑—á\n"
            f"--- üîÑ –†–µ–∂–∏–º CC ---\n"
            f"üîå –ú–æ—â–Ω–æ—Å—Ç—å –∑–∞—Ä—è–¥–∞ (CC): {P_–∑–∞—Ä_cc:.0f} –í—Ç\n"
            f"‚ö° –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ (CC): {P_–ø–æ—Ç—Ä_–≥–µ–Ω_cc:.0f} –í—Ç\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è –∑–∞—Ä—è–¥–∞ (CC): {t_–∑–∞—Ä_cc:.2f} —á\n"
            f"‚õΩ –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (CC): {V_—Ç–æ–ø–ª–∏–≤–æ_cc:.2f} –ª\n"
            f"--- ‚ö° –†–µ–∂–∏–º CV ---\n"
            f"üîå –ú–æ—â–Ω–æ—Å—Ç—å –∑–∞—Ä—è–¥–∞ (CV): {P_–∑–∞—Ä_cv:.0f} –í—Ç\n"
            f"‚ö° –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ (CV): {P_–ø–æ—Ç—Ä_–≥–µ–Ω_cv:.0f} –í—Ç\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è –∑–∞—Ä—è–¥–∞ (CV): {t_–∑–∞—Ä_cv:.2f} —á\n"
            f"‚õΩ –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (CV): {V_—Ç–æ–ø–ª–∏–≤–æ_cv:.2f} –ª\n"
            f"--- üìä –ò–¢–û–ì–û ---\n"
            f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –∑–∞—Ä—è–¥–∞: {t_–∑–∞—Ä_–æ–±—â:.2f} —á\n"
            f"‚õΩ –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞: {V_—Ç–æ–ø–ª–∏–≤–æ_–æ–±—â:.2f} –ª\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã –æ—Ç –ê–ö–ë: {t_–∞–≤—Ç–æ–Ω–æ–º–∏—è:.2f} —á"
        )

        result_label.config(text=result_text)

        # === –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ ===
        plot_charge_curve(t_–∑–∞—Ä_cc, t_–∑–∞—Ä_cv, U_cc, U_cv)

    except ValueError:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞.")
    except ZeroDivisionError:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –ö–ü–î –∏–ª–∏ —Ç–æ–∫–∞.")


def plot_charge_curve(t_cc, t_cv, u_cc, u_cv):
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞—Ä—è–¥–∞ –ê–ö–ë"""
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
    for widget in plot_frame.winfo_children():
        widget.destroy()

    fig, ax = plt.subplots(figsize=(4, 3), dpi=100)

    time_cc = [0, t_cc]
    voltage_cc = [22.5, u_cc]  # –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ —Ä–∞—Å—Ç—ë—Ç
    time_cv = [t_cc, t_cc + t_cv]
    voltage_cv = [u_cc, u_cv]  # –£—Ä–æ–≤–µ–Ω—å

    ax.plot(time_cc, voltage_cc, label="CC —Ä–µ–∂–∏–º", marker='o')
    ax.plot(time_cv, voltage_cv, label="CV —Ä–µ–∂–∏–º", linestyle='--', marker='o')
    ax.set_title("–ó–∞—Ä—è–¥ –ê–ö–ë (–≤—Ä–µ–º—è vs –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ)")
    ax.set_xlabel("–í—Ä–µ–º—è (—á)")
    ax.set_ylabel("–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ (–í)")
    ax.legend()
    ax.grid(True)
    fig.tight_layout()

    canvas = FigureCanvasTkAgg(fig, master=plot_frame)
    canvas.draw()
    canvas.get_tk_widget().pack()


def save_to_file():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
    if not calc_data:
        messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–∞—Å—á—ë—Ç.")
        return

    file_path = filedialog.asksaveasfilename(defaultextension=".txt",
                                             filetypes=[("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"),
                                                        ("CSV —Ñ–∞–π–ª—ã", "*.csv")])
    if not file_path:
        return

    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    data = {**{"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è": timestamp}, **calc_data}

    if file_path.endswith(".txt"):
        with open(file_path, "w", encoding="utf-8") as f:
            for key, value in data.items():
                f.write(f"{key}: {value:.2f}\n")
        messagebox.showinfo("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:\n{file_path}")

    elif file_path.endswith(".csv"):
        df = pd.DataFrame(list(data.items()), columns=["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–ó–Ω–∞—á–µ–Ω–∏–µ"])
        df.to_csv(file_path, index=False)
        messagebox.showinfo("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:\n{file_path}")


def on_exit():
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    if messagebox.askokcancel("–í—ã—Ö–æ–¥", "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?"):
        root.destroy()


# === GUI ===
root = tk.Tk()
root.title("üîã –†–∞—Å—á—ë—Ç –∑–∞—Ä—è–¥–∞ –ê–ö–ë ‚Äî —Å –≥—Ä–∞—Ñ–∏–∫–æ–º —Å–ª–µ–≤–∞")
root.geometry("1000x700")
root.grid_rowconfigure(0, weight=1)  # –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
root.grid_rowconfigure(1, weight=0)  # –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
root.grid_rowconfigure(2, weight=0)  # –¥–ª—è –∫–Ω–æ–ø–æ–∫
root.grid_rowconfigure(3, weight=1)  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
root.resizable(False, False)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
root.protocol("WM_DELETE_WINDOW", on_exit)

# === –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ª–µ–≤—É—é –∏ –ø—Ä–∞–≤—É—é —á–∞—Å—Ç–∏ ===
root.grid_columnconfigure(0, weight=1)
root.grid_columnconfigure(1, weight=2)
root.grid_rowconfigure(0, weight=1)

# === –õ–µ–≤–∞—è —á–∞—Å—Ç—å ‚Äî –≥—Ä–∞—Ñ–∏–∫ ===
plot_frame = ttk.Frame(root, width=300, height=300)
plot_frame.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")

# === –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å ‚Äî –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö ===
frame_input = ttk.Frame(root, padding=10)
frame_input.grid(row=0, column=1, padx=10, pady=10, sticky="nsew")

# --- –ü–æ–ª—è –≤–≤–æ–¥–∞ ---
ttk.Label(frame_input, text="üîã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ê–ö–ë").grid(row=0, column=0, sticky="w", pady=5)
ttk.Label(frame_input, text="–Å–º–∫–æ—Å—Ç—å –ê–ö–ë (–ê¬∑—á)").grid(row=1, column=0, sticky="w")
entry_C = ttk.Entry(frame_input, width=10)
entry_C.insert(0, "130")
entry_C.grid(row=1, column=1)

ttk.Label(frame_input, text="–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ê–ö–ë (–í)").grid(row=2, column=0, sticky="w")
entry_U = ttk.Entry(frame_input, width=10)
entry_U.insert(0, "24")
entry_U.grid(row=2, column=1)

ttk.Label(frame_input, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ê–ö–ë").grid(row=3, column=0, sticky="w")
entry_N = ttk.Entry(frame_input, width=10)
entry_N.insert(0, "2")
entry_N.grid(row=3, column=1)

ttk.Label(frame_input, text="–ì–ª—É–±–∏–Ω–∞ —Ä–∞–∑—Ä—è–¥–∞ (DoD, %)").grid(row=4, column=0, sticky="w")
entry_DoD = ttk.Entry(frame_input, width=10)
entry_DoD.insert(0, "85")
entry_DoD.grid(row=4, column=1)

# --- –ó–∞—Ä—è–¥ (CC) ---
ttk.Label(frame_input, text="üîÑ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞—Ä—è–¥–∞ (CC)").grid(row=5, column=0, sticky="w", pady=5)
ttk.Label(frame_input, text="–¢–æ–∫ –∑–∞—Ä—è–¥–∞ (CC, –ê)").grid(row=6, column=0, sticky="w")
entry_I_cc = ttk.Entry(frame_input, width=10)
entry_I_cc.insert(0, "40")
entry_I_cc.grid(row=6, column=1)

ttk.Label(frame_input, text="–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ø—Ä–∏ CC (–í)").grid(row=7, column=0, sticky="w")
entry_U_cc = ttk.Entry(frame_input, width=10)
entry_U_cc.insert(0, "26.7")
entry_U_cc.grid(row=7, column=1)

# --- –ó–∞—Ä—è–¥ (CV) ---
ttk.Label(frame_input, text="‚ö° –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞—Ä—è–¥–∞ (CV)").grid(row=8, column=0, sticky="w", pady=5)
ttk.Label(frame_input, text="–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ø—Ä–∏ CV (–í)").grid(row=9, column=0, sticky="w")
entry_U_cv = ttk.Entry(frame_input, width=10)
entry_U_cv.insert(0, "26.75")
entry_U_cv.grid(row=9, column=1)

ttk.Label(frame_input, text="–¢–æ–∫ –ø—Ä–∏ CV (–ê)").grid(row=10, column=0, sticky="w")
entry_I_cv = ttk.Entry(frame_input, width=10)
entry_I_cv.insert(0, "4")
entry_I_cv.grid(row=10, column=1)

# --- –≠–ª–µ–∫—Ç—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ ---
ttk.Label(frame_input, text="üîå –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–ª–µ–∫—Ç—Ä–æ–ø–∏—Ç–∞–Ω–∏—è").grid(row=11, column=0, sticky="w", pady=5)
ttk.Label(frame_input, text="–ö–ü–î –∏–Ω–≤–µ—Ä—Ç–æ—Ä–∞ (%)").grid(row=12, column=0, sticky="w")
entry_eta = ttk.Entry(frame_input, width=10)
entry_eta.insert(0, "92")
entry_eta.grid(row=12, column=1)

ttk.Label(frame_input, text="–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (–ª/–∫–í—Ç¬∑—á)").grid(row=13, column=0, sticky="w")
entry_q = ttk.Entry(frame_input, width=10)
entry_q.insert(0, "0.5")
entry_q.grid(row=13, column=1)

# --- –ù–∞–≥—Ä—É–∑–∫–∞ ---
ttk.Label(frame_input, text="‚è±Ô∏è –ù–∞–≥—Ä—É–∑–∫–∞").grid(row=14, column=0, sticky="w", pady=5)
ttk.Label(frame_input, text="–ú–æ—â–Ω–æ—Å—Ç—å –Ω–∞–≥—Ä—É–∑–∫–∏ (–í—Ç)").grid(row=15, column=0, sticky="w")
entry_P = ttk.Entry(frame_input, width=10)
entry_P.insert(0, "170")
entry_P.grid(row=15, column=1)

# === –ö–Ω–æ–ø–∫–∏ ===
btn_frame = ttk.Frame(root, padding=10)
btn_frame.grid(row=2, column=0, columnspan=2, sticky="ew")

calc_button = ttk.Button(btn_frame, text="üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å", command=calculate)
calc_button.pack(side="left", padx=5)

save_button = ttk.Button(btn_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_to_file)
save_button.pack(side="left", padx=5)

exit_button = ttk.Button(btn_frame, text="üö™ –í—ã—Ö–æ–¥", command=on_exit)
exit_button.pack(side="left", padx=5)

# === –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ===
result_label = tk.Label(root, text="", justify="left", font=("Courier", 10), bg="white", anchor="nw", relief="sunken", padx=10, pady=10, wraplength=850)
result_label.grid(row=1, column=0, columnspan=2, padx=10, pady=10, sticky="ew")

# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
root.mainloop()