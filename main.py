import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import pandas as pd
from datetime import datetime

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
calc_data = {}

def calculate():
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞—Ä—è–¥–∞ –ê–ö–ë –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    global calc_data
    try:
        # === –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ ===
        battery_capacity = float(entry_capacity.get() or 130)  # –Å–º–∫–æ—Å—Ç—å –ê–ö–ë
        battery_voltage = float(entry_voltage.get() or 24)     # –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ê–ö–ë
        battery_count = float(entry_count.get() or 2)          # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ê–ö–ë
        depth_of_discharge = float(entry_dod.get() or 85) / 100  # –ì–ª—É–±–∏–Ω–∞ —Ä–∞–∑—Ä—è–¥–∞
        charge_current_cc = float(entry_current_cc.get() or 40)  # –¢–æ–∫ –∑–∞—Ä—è–¥–∞ (CC)
        charge_voltage_cc = float(entry_voltage_cc.get() or 26.7)  # –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ (CC)
        charge_voltage_cv = float(entry_voltage_cv.get() or 26.75)  # –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ (CV)
        charge_current_cv = float(entry_current_cv.get() or 4)  # –¢–æ–∫ (CV)
        inverter_efficiency = float(entry_efficiency.get() or 92) / 100  # –ö–ü–î –∏–Ω–≤–µ—Ä—Ç–æ—Ä–∞
        fuel_consumption_rate = float(entry_fuel_rate.get() or 0.5)  # –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞
        load_power = float(entry_load_power.get() or 170)  # –ú–æ—â–Ω–æ—Å—Ç—å –Ω–∞–≥—Ä—É–∑–∫–∏

        # === –†–∞—Å—á—ë—Ç—ã ===
        total_energy = battery_count * battery_capacity * battery_voltage
        needed_energy = total_energy * depth_of_discharge

        # –†–µ–∂–∏–º CC
        power_charge_cc = charge_voltage_cc * charge_current_cc
        time_charge_cc = (needed_energy * 0.6) / power_charge_cc
        power_from_generator_cc = power_charge_cc / inverter_efficiency

        # –†–µ–∂–∏–º CV
        power_charge_cv = charge_voltage_cv * charge_current_cv
        time_charge_cv = (needed_energy * 0.2) / power_charge_cv
        power_from_generator_cv = power_charge_cv / inverter_efficiency

        # –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        total_charge_time = time_charge_cc + time_charge_cv
        fuel_consumption_cc = time_charge_cc * (power_from_generator_cc / 1000) * fuel_consumption_rate * time_charge_cc
        fuel_consumption_cv = time_charge_cv * (power_from_generator_cv / 1000) * fuel_consumption_rate * time_charge_cv
        total_fuel_consumption = fuel_consumption_cc + fuel_consumption_cv
        autonomy_time = needed_energy / load_power

        # === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏ –≤—ã–≤–æ–¥–∞ ===
        calc_data = {
            "–û–±—â–∞—è —ç–Ω–µ—Ä–≥–æ—ë–º–∫–æ—Å—Ç—å –ê–ö–ë (–í—Ç¬∑—á)": total_energy,
            "–≠–Ω–µ—Ä–≥–∏—è –¥–ª—è –∑–∞—Ä—è–¥–∞ (DoD)": needed_energy,
            "–ú–æ—â–Ω–æ—Å—Ç—å –∑–∞—Ä—è–¥–∞ (CC)": power_charge_cc,
            "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ (CC)": power_from_generator_cc,
            "–í—Ä–µ–º—è –∑–∞—Ä—è–¥–∞ (CC)": time_charge_cc,
            "–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (CC)": fuel_consumption_cc,
            "–ú–æ—â–Ω–æ—Å—Ç—å –∑–∞—Ä—è–¥–∞ (CV)": power_charge_cv,
            "–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ (CV)": power_from_generator_cv,
            "–í—Ä–µ–º—è –∑–∞—Ä—è–¥–∞ (CV)": time_charge_cv,
            "–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (CV)": fuel_consumption_cv,
            "–û–±—â–µ–µ –≤—Ä–µ–º—è –∑–∞—Ä—è–¥–∞": total_charge_time,
            "–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞": total_fuel_consumption,
            "–í—Ä–µ–º—è –∞–≤—Ç–æ–Ω–æ–º–∏–∏": autonomy_time,
        }

        # === –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ===
        result_text = (
            f"üîã –û–±—â–∞—è —ç–Ω–µ—Ä–≥–æ—ë–º–∫–æ—Å—Ç—å –ê–ö–ë: {total_energy:.0f} –í—Ç¬∑—á\n"
            f"‚ö° –≠–Ω–µ—Ä–≥–∏—è –¥–ª—è –∑–∞—Ä—è–¥–∞ (DoD={depth_of_discharge * 100:.0f}%): {needed_energy:.0f} –í—Ç¬∑—á\n"
            f"--- üîÑ –†–µ–∂–∏–º CC ---\n"
            f"üîå –ú–æ—â–Ω–æ—Å—Ç—å –∑–∞—Ä—è–¥–∞ (CC): {power_charge_cc:.0f} –í—Ç\n"
            f"‚ö° –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ (CC): {power_from_generator_cc:.0f} –í—Ç\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è –∑–∞—Ä—è–¥–∞ (CC): {time_charge_cc:.2f} —á\n"
            f"‚õΩ –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (CC): {fuel_consumption_cc:.2f} –ª\n"
            f"--- ‚ö° –†–µ–∂–∏–º CV ---\n"
            f"üîå –ú–æ—â–Ω–æ—Å—Ç—å –∑–∞—Ä—è–¥–∞ (CV): {power_charge_cv:.0f} –í—Ç\n"
            f"‚ö° –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ (CV): {power_from_generator_cv:.0f} –í—Ç\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è –∑–∞—Ä—è–¥–∞ (CV): {time_charge_cv:.2f} —á\n"
            f"‚õΩ –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (CV): {fuel_consumption_cv:.2f} –ª\n"
            f"--- üìä –ò–¢–û–ì–û ---\n"
            f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –∑–∞—Ä—è–¥–∞: {total_charge_time:.2f} —á\n"
            f"‚õΩ –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞: {total_fuel_consumption:.2f} –ª\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã: {autonomy_time:.2f} —á"
        )
        result_textbox.delete("1.0", tk.END)
        result_textbox.insert(tk.END, result_text)

        # === –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ ===
        plot_charge_curve(time_charge_cc, time_charge_cv, charge_voltage_cc, charge_voltage_cv)

    except ValueError:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞.")
    except ZeroDivisionError:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –ö–ü–î –∏–ª–∏ —Ç–æ–∫–∞.")

def plot_charge_curve(time_cc, time_cv, voltage_cc, voltage_cv):
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞—Ä—è–¥–∞ –ê–ö–ë"""
    for widget in plot_frame.winfo_children():
        widget.destroy()

    fig, ax = plt.subplots(figsize=(4, 3), dpi=100)
    time_cc_values = [0, time_cc]
    voltage_cc_values = [22.5, voltage_cc]
    time_cv_values = [time_cc, time_cc + time_cv]
    voltage_cv_values = [voltage_cc, voltage_cv]

    ax.plot(time_cc_values, voltage_cc_values, label="CC —Ä–µ–∂–∏–º", marker="o")
    ax.plot(time_cv_values, voltage_cv_values, label="CV —Ä–µ–∂–∏–º", linestyle="--", marker="o")
    ax.set_title("–ó–∞—Ä—è–¥ –ê–ö–ë (–≤—Ä–µ–º—è vs –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ)")
    ax.set_xlabel("–í—Ä–µ–º—è (—á)")
    ax.set_ylabel("–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ (–í)")
    ax.legend()
    ax.grid(True)
    fig.tight_layout()

    canvas = FigureCanvasTkAgg(fig, master=plot_frame)
    canvas.draw()
    canvas.get_tk_widget().pack()

def save_to_file():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
    if not calc_data:
        messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–∞—Å—á—ë—Ç.")
        return

    file_path = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[
        ("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"),
        ("CSV —Ñ–∞–π–ª—ã", "*.csv")
    ])

    if not file_path:
        return

    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    data = {"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è": timestamp, **calc_data}

    if file_path.endswith(".txt"):
        with open(file_path, "w", encoding="utf-8") as file:
            for key, value in data.items():
                if isinstance(value, (int, float)):
                    file.write(f"{key}: {value:.2f}\n")
                else:
                    file.write(f"{key}: {value}\n")
        messagebox.showinfo("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:\n{file_path}")

    elif file_path.endswith(".csv"):
        df = pd.DataFrame(list(data.items()), columns=["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–ó–Ω–∞—á–µ–Ω–∏–µ"])
        df.to_csv(file_path, index=False)
        messagebox.showinfo("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:\n{file_path}")

def on_exit():
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    if messagebox.askokcancel("–í—ã—Ö–æ–¥", "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?"):
        root.destroy()

# === GUI ===
root = tk.Tk()
root.title("üîã –†–∞—Å—á—ë—Ç –∑–∞—Ä—è–¥–∞ –ê–ö–ë")
root.geometry("1000x700")
root.resizable(False, False)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
root.protocol("WM_DELETE_WINDOW", on_exit)

# === –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ª–µ–≤—É—é –∏ –ø—Ä–∞–≤—É—é —á–∞—Å—Ç–∏ ===
root.grid_columnconfigure(0, weight=1)  # –õ–µ–≤–∞—è —á–∞—Å—Ç—å ‚Äî —Ñ–æ—Ä–º–∞ –≤–≤–æ–¥–∞
root.grid_columnconfigure(1, weight=2)  # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å ‚Äî –≥—Ä–∞—Ñ–∏–∫
root.grid_rowconfigure(0, weight=1)     # –§–æ—Ä–º–∞ –∏ –≥—Ä–∞—Ñ–∏–∫
root.grid_rowconfigure(1, weight=0)     # –ö–Ω–æ–ø–∫–∏
root.grid_rowconfigure(2, weight=0)     # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
root.grid_rowconfigure(3, weight=1)     # –ü—É—Å—Ç–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤–Ω–∏–∑—É

# === –õ–µ–≤–∞—è —á–∞—Å—Ç—å ‚Äî –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö ===
frame_input = ttk.Frame(root, padding=10)
frame_input.grid(row=0, column=0, padx=10, pady=0, sticky="nsew")

# --- –ü–æ–ª—è –≤–≤–æ–¥–∞ ---
ttk.Label(frame_input, text="üîã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ê–ö–ë").grid(row=0, column=0, sticky="w", pady=5)
ttk.Label(frame_input, text="–Å–º–∫–æ—Å—Ç—å –ê–ö–ë (–ê¬∑—á)").grid(row=1, column=0, sticky="w")
entry_capacity = ttk.Entry(frame_input, width=10)
entry_capacity.insert(0, "130")
entry_capacity.grid(row=1, column=1)

ttk.Label(frame_input, text="–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ê–ö–ë (–í)").grid(row=2, column=0, sticky="w")
entry_voltage = ttk.Entry(frame_input, width=10)
entry_voltage.insert(0, "24")
entry_voltage.grid(row=2, column=1)

ttk.Label(frame_input, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ê–ö–ë").grid(row=3, column=0, sticky="w")
entry_count = ttk.Entry(frame_input, width=10)
entry_count.insert(0, "2")
entry_count.grid(row=3, column=1)

ttk.Label(frame_input, text="–ì–ª—É–±–∏–Ω–∞ —Ä–∞–∑—Ä—è–¥–∞ (DoD, %)").grid(row=4, column=0, sticky="w")
entry_dod = ttk.Entry(frame_input, width=10)
entry_dod.insert(0, "85")
entry_dod.grid(row=4, column=1)

# --- –ó–∞—Ä—è–¥ (CC) ---
ttk.Label(frame_input, text="üîÑ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞—Ä—è–¥–∞ (CC)").grid(row=5, column=0, sticky="w", pady=5)
ttk.Label(frame_input, text="–¢–æ–∫ –∑–∞—Ä—è–¥–∞ (CC, –ê)").grid(row=6, column=0, sticky="w")
entry_current_cc = ttk.Entry(frame_input, width=10)
entry_current_cc.insert(0, "40")
entry_current_cc.grid(row=6, column=1)

ttk.Label(frame_input, text="–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ø—Ä–∏ CC (–í)").grid(row=7, column=0, sticky="w")
entry_voltage_cc = ttk.Entry(frame_input, width=10)
entry_voltage_cc.insert(0, "26.7")
entry_voltage_cc.grid(row=7, column=1)

# --- –ó–∞—Ä—è–¥ (CV) ---
ttk.Label(frame_input, text="‚ö° –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞—Ä—è–¥–∞ (CV)").grid(row=8, column=0, sticky="w", pady=5)
ttk.Label(frame_input, text="–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ø—Ä–∏ CV (–í)").grid(row=9, column=0, sticky="w")
entry_voltage_cv = ttk.Entry(frame_input, width=10)
entry_voltage_cv.insert(0, "26.75")
entry_voltage_cv.grid(row=9, column=1)

ttk.Label(frame_input, text="–¢–æ–∫ –ø—Ä–∏ CV (–ê)").grid(row=10, column=0, sticky="w")
entry_current_cv = ttk.Entry(frame_input, width=10)
entry_current_cv.insert(0, "4")
entry_current_cv.grid(row=10, column=1)

# --- –≠–ª–µ–∫—Ç—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ ---
ttk.Label(frame_input, text="üîå –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–ª–µ–∫—Ç—Ä–æ–ø–∏—Ç–∞–Ω–∏—è").grid(row=11, column=0, sticky="w", pady=5)
ttk.Label(frame_input, text="–ö–ü–î –∏–Ω–≤–µ—Ä—Ç–æ—Ä–∞ (%)").grid(row=12, column=0, sticky="w")
entry_efficiency = ttk.Entry(frame_input, width=10)
entry_efficiency.insert(0, "92")
entry_efficiency.grid(row=12, column=1)

ttk.Label(frame_input, text="–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (–ª/–∫–í—Ç¬∑—á)").grid(row=13, column=0, sticky="w")
entry_fuel_rate = ttk.Entry(frame_input, width=10)
entry_fuel_rate.insert(0, "0.5")
entry_fuel_rate.grid(row=13, column=1)

# --- –ù–∞–≥—Ä—É–∑–∫–∞ ---
ttk.Label(frame_input, text="‚è±Ô∏è –ù–∞–≥—Ä—É–∑–∫–∞").grid(row=14, column=0, sticky="w", pady=5)
ttk.Label(frame_input, text="–ú–æ—â–Ω–æ—Å—Ç—å –Ω–∞–≥—Ä—É–∑–∫–∏ (–í—Ç)").grid(row=15, column=0, sticky="w")
entry_load_power = ttk.Entry(frame_input, width=10)
entry_load_power.insert(0, "170")
entry_load_power.grid(row=15, column=1)

# === –ö–Ω–æ–ø–∫–∏ ===
btn_frame = ttk.Frame(frame_input)
btn_frame.grid(row=16, column=0, columnspan=2, pady=10)

ttk.Button(btn_frame, text="üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å", command=calculate).pack(side="left", padx=5)
ttk.Button(btn_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_to_file).pack(side="left", padx=5)
ttk.Button(btn_frame, text="üö™ –í—ã—Ö–æ–¥", command=on_exit).pack(side="left", padx=5)

# === –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å ‚Äî –≥—Ä–∞—Ñ–∏–∫ ===
plot_frame = ttk.Frame(root, width=300, height=300)
plot_frame.grid(row=0, column=1, padx=10, pady=10, sticky="nsew")
plot_frame.grid_propagate(False)

# === –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π ===
result_textbox = tk.Text(
    root,
    font=("Courier", 10),
    bg="white",
    wrap="word",
    padx=10,
    pady=10,
    height=12,
    relief="sunken"
)
result_textbox.grid(row=2, column=0, columnspan=2, padx=10, pady=5, sticky="ew")

# === –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ ===
scrollbar = ttk.Scrollbar(root, orient="vertical", command=result_textbox.yview)
scrollbar.grid(row=2, column=2, sticky="ns")
result_textbox.configure(yscrollcommand=scrollbar.set)

# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
root.mainloop()